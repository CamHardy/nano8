program -> declaration* EOF ;

declaration -> variableDeclaration
						 | statement ;

variableDeclaration -> 'var' IDENTIFIER ( '=' expression )? ';' ;

statement -> expressionStatement
					 | printStatement 
					 | block ;

expressionStatement -> expression ';' ;
printStatement -> 'print' expression ';' ;
block -> '{' declaration* '}' ;

expression -> assignment ;

assignment -> IDENTIFIER '=' assignment | equality ;

equality -> comparison ( ( '==' | '!=' ) comparison )* ;
comparison -> term ( ( '>' | '>=' | '<' | '<=' ) term )* ;
term -> factor ( ( '-' | '+' ) factor )* ;
factor -> unary ( ( '/' | '*' ) unary )* ;

unary -> ( '!' | '-' ) unary ;
primary -> 'true' | 'false' | 'nil' | NUMBER | STRING | IDENTIFIER | '(' expression ')' ;

NUMBER -> DIGIT+ ( '.' DIGIT+ )? ;
STRING -> '"' <any char except '"'>* '"' ;
IDENTIFIER -> ALPHA ( ALPHA | DIGIT )* ;
ALPHA -> 'a' ... 'z' | 'A' ... 'Z' | '_' ;
DIGIT -> '0' ... '9' ;